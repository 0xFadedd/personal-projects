{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,SCAzBF,EAAOC,QAAUC,QAAQ,gB,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,0FCtBA,eACA,QAEA,IAAIQ,EAeJ,SAASC,EAAKC,GACV,GAA4B,SAAxBA,EAASC,IAAIC,OACb,OAIJ,MAAMC,GAAS,IAAAC,UAAS,yCAAyCJ,EAASK,YAAYC,WAAWC,OAAOC,MAAM,MAGxGC,EAAmC,GACzC,IAAK,MAAMC,KAASP,EAAQ,CACxB,MAAMQ,EAAgC,CAClCC,SAAUC,EAAOC,mBAAmBC,QACpCC,MAAO,IAAIH,EAAOI,MAAM,EAAG,EAAG,EAAG,GACjCC,QAASR,EACTS,OAAQ,kBAEZV,EAAYW,KAAKT,E,CAGrBb,EAAqBuB,IAAIrB,EAASC,IAAKQ,EAC3C,CAlCA,oBAAyBa,GACrBxB,EAAuBe,EAAOU,UAAUC,2BAA2B,kBAE/DX,EAAOY,OAAOC,kBACd3B,EAAKc,EAAOY,OAAOC,iBAAiB1B,UAIxCsB,EAAQK,cAAcP,KAAKP,EAAOe,UAAUC,yBAAwBC,IAChE/B,EAAK+B,EAAM9B,SAAS,IAE5B,C","sources":["webpack://directory-structure-checker/external commonjs \"vscode\"","webpack://directory-structure-checker/external node-commonjs \"child_process\"","webpack://directory-structure-checker/webpack/bootstrap","webpack://directory-structure-checker/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { execSync } from 'child_process';\n\nlet diagnosticCollection: vscode.DiagnosticCollection;\n\nexport function activate(context: vscode.ExtensionContext) {\n    diagnosticCollection = vscode.languages.createDiagnosticCollection('YourLinterName');\n    \n    if (vscode.window.activeTextEditor) {\n        lint(vscode.window.activeTextEditor.document);\n    }\n\n    // Listen to changes to lint in real-time\n    context.subscriptions.push(vscode.workspace.onDidChangeTextDocument(event => {\n        lint(event.document);\n    }));\n}\n\nfunction lint(document: vscode.TextDocument) {\n    if (document.uri.scheme !== 'file') {\n        return;\n    }\n\n    // Run your custom linter\n    const result = execSync(`python3 path_to_your_linter/linter.py ${document.fileName}`).toString().trim().split(\"\\n\");\n    \n    // Parse the results and create diagnostics\n    const diagnostics: vscode.Diagnostic[] = [];\n    for (const issue of result) {\n        const diagnostic: vscode.Diagnostic = {\n            severity: vscode.DiagnosticSeverity.Warning,\n            range: new vscode.Range(0, 0, 0, 0),\n            message: issue,\n            source: 'YourLinterName'\n        };\n        diagnostics.push(diagnostic);\n    }\n\n    diagnosticCollection.set(document.uri, diagnostics);\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","diagnosticCollection","lint","document","uri","scheme","result","execSync","fileName","toString","trim","split","diagnostics","issue","diagnostic","severity","vscode","DiagnosticSeverity","Warning","range","Range","message","source","push","set","context","languages","createDiagnosticCollection","window","activeTextEditor","subscriptions","workspace","onDidChangeTextDocument","event"],"sourceRoot":""}